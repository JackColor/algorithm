# _*_ coding:utf-8 _*_
# __author__JackColor__

"""
13
内容描述

罗马数字包含以下七种字符：I， V， X， L，C，D 和 M。
字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。
27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，
而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4
。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。

给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。

示例 1:
输入: "III"
输出: 3

示例 2:
输入: "IV"
输出: 4

示例 3:
输入: "IX"
输出: 9

示例 4:
输入: "LVIII"
输出: 58
解释: L = 50, V = 5, III = 3.

示例 5:
输入: "MCMXCIV"
输出: 1994
解释: M = 1000, CM = 900, XC = 90, IV = 4.

"""


#  罗马数字中小的数字在大的数字的右边   大的数字|小的数字 正常  -- 小的数字|大的数字 非正常
def solution(s):
    lookup = {
        "I": 1,
        "V": 5,
        "X": 10,
        "L": 50,
        "C": 100,
        "D": 500,
        "M": 1000
    }  # 对应关系
    res = 0
    for i in range(len(s)):
        # 从第二格数 比较  "MCMXCIV"
        """
        这个是当从第二个开始的时候 我就要检测我当前的这个符号代表的数字,
        跟上一个字符代表的数字的关系，如果是不正常的 那我需要 先把上一次加上去的减去，然后再加上
        我当前数字减去前一个数字的值  所以要减两次
        """
        if i > 0 and lookup[s[i]] > lookup[s[i - 1]]:  # 非正常情况
            res += lookup[s[i]] - 2 * lookup[s[i - 1]]
        else:
            res += lookup[s[i]]

    return res


if __name__ == '__main__':
    res = solution("MCMXCIV")
    print(res)
